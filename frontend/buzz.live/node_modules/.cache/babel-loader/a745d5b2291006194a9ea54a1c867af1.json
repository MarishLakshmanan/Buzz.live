{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport Peer from \"peerjs\";\nconst activePeers = {};\n\nfunction initSocketConnection(roomID) {\n  const peer = new Peer();\n  const socket = io(\"http://localhost:5000\");\n  peer.on(\"open\", id => {\n    socket.emit(\"join-room\", roomID, id);\n  });\n  socket.on(\"user-leaved\", userID => {\n    if (activePeers[userID]) {\n      activePeers[userID].close();\n    }\n  });\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: false\n  }).then(yourStream => {\n    peer.on(\"call\", call => {\n      call.answer(yourStream);\n      const video2 = document.createElement(\"video\");\n      call.on(\"stream\", anotherStream => {\n        addVideoStream(video2, anotherStream);\n      });\n    });\n    const video = document.createElement(\"video\");\n    addVideoStream(video, yourStream);\n    socket.on(\"user-joined\", userID => {\n      connectToNewUser(userID, yourStream, peer);\n    });\n  });\n}\n\nfunction addVideoStream(video, stream) {\n  const container = document.getElementById(\"r-video-container\");\n  video.srcObject = stream;\n  video.addEventListener(\"loadedmetadata\", () => {\n    video.play();\n  });\n  container.appendChild(video);\n}\n\nfunction connectToNewUser(userID, yourStream, peer) {\n  const call = peer.call(userID, yourStream);\n  const video = document.createElement(\"video\");\n  call.on(\"stream\", anotherUserstream => {\n    addVideoStream(video, anotherUserstream);\n  });\n  call.on(\"close\", () => {\n    video.remove();\n  });\n  activePeers[userID] = call;\n}\n\nexport { initSocketConnection };","map":{"version":3,"sources":["C:/Users/sakth/Documents/Buzz.live/frontend/buzz.live/src/functions/roomConnection.js"],"names":["io","Peer","activePeers","initSocketConnection","roomID","peer","socket","on","id","emit","userID","close","navigator","mediaDevices","getUserMedia","video","audio","then","yourStream","call","answer","video2","document","createElement","anotherStream","addVideoStream","connectToNewUser","stream","container","getElementById","srcObject","addEventListener","play","appendChild","anotherUserstream","remove"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,kBAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,WAAW,GAAG,EAApB;;AAEA,SAASC,oBAAT,CAA8BC,MAA9B,EAAqC;AACjC,QAAMC,IAAI,GAAG,IAAIJ,IAAJ,EAAb;AACA,QAAMK,MAAM,GAAGN,EAAE,CAAC,uBAAD,CAAjB;AAEAK,EAAAA,IAAI,CAACE,EAAL,CAAQ,MAAR,EAAgBC,EAAD,IAAM;AACjBF,IAAAA,MAAM,CAACG,IAAP,CAAY,WAAZ,EAAwBL,MAAxB,EAA+BI,EAA/B;AACH,GAFD;AAIAF,EAAAA,MAAM,CAACC,EAAP,CAAU,aAAV,EAAwBG,MAAM,IAAE;AAC5B,QAAGR,WAAW,CAACQ,MAAD,CAAd,EAAuB;AACnBR,MAAAA,WAAW,CAACQ,MAAD,CAAX,CAAoBC,KAApB;AACH;AACJ,GAJD;AAMAC,EAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAChCC,IAAAA,KAAK,EAAC,IAD0B;AAEhCC,IAAAA,KAAK,EAAC;AAF0B,GAApC,EAGGC,IAHH,CAGSC,UAAD,IAAc;AAElBb,IAAAA,IAAI,CAACE,EAAL,CAAQ,MAAR,EAAgBY,IAAD,IAAQ;AACnBA,MAAAA,IAAI,CAACC,MAAL,CAAYF,UAAZ;AACA,YAAMG,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAf;AACAJ,MAAAA,IAAI,CAACZ,EAAL,CAAQ,QAAR,EAAkBiB,aAAD,IAAiB;AAC9BC,QAAAA,cAAc,CAACJ,MAAD,EAAQG,aAAR,CAAd;AACH,OAFD;AAGH,KAND;AAQA,UAAMT,KAAK,GAAGO,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAE,IAAAA,cAAc,CAACV,KAAD,EAAOG,UAAP,CAAd;AAEAZ,IAAAA,MAAM,CAACC,EAAP,CAAU,aAAV,EAAyBG,MAAD,IAAU;AAC9BgB,MAAAA,gBAAgB,CAAChB,MAAD,EAAQQ,UAAR,EAAmBb,IAAnB,CAAhB;AACH,KAFD;AAGH,GAnBD;AAuBH;;AAED,SAASoB,cAAT,CAAwBV,KAAxB,EAA8BY,MAA9B,EAAqC;AACjC,QAAMC,SAAS,GAAGN,QAAQ,CAACO,cAAT,CAAwB,mBAAxB,CAAlB;AACAd,EAAAA,KAAK,CAACe,SAAN,GAAkBH,MAAlB;AACAZ,EAAAA,KAAK,CAACgB,gBAAN,CAAuB,gBAAvB,EAAwC,MAAI;AACxChB,IAAAA,KAAK,CAACiB,IAAN;AACH,GAFD;AAGAJ,EAAAA,SAAS,CAACK,WAAV,CAAsBlB,KAAtB;AACH;;AAED,SAASW,gBAAT,CAA0BhB,MAA1B,EAAiCQ,UAAjC,EAA4Cb,IAA5C,EAAiD;AAC7C,QAAMc,IAAI,GAAGd,IAAI,CAACc,IAAL,CAAUT,MAAV,EAAiBQ,UAAjB,CAAb;AACA,QAAMH,KAAK,GAAGO,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAJ,EAAAA,IAAI,CAACZ,EAAL,CAAQ,QAAR,EAAkB2B,iBAAD,IAAqB;AAClCT,IAAAA,cAAc,CAACV,KAAD,EAAOmB,iBAAP,CAAd;AACH,GAFD;AAIAf,EAAAA,IAAI,CAACZ,EAAL,CAAQ,OAAR,EAAgB,MAAI;AAChBQ,IAAAA,KAAK,CAACoB,MAAN;AACH,GAFD;AAIAjC,EAAAA,WAAW,CAACQ,MAAD,CAAX,GAAsBS,IAAtB;AAGH;;AAED,SAAQhB,oBAAR","sourcesContent":["import {io} from \"socket.io-client\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst activePeers = {};\r\n\r\nfunction initSocketConnection(roomID){\r\n    const peer = new Peer();\r\n    const socket = io(\"http://localhost:5000\")\r\n\r\n    peer.on(\"open\",(id)=>{\r\n        socket.emit(\"join-room\",roomID,id)\r\n    })\r\n\r\n    socket.on(\"user-leaved\",userID=>{\r\n        if(activePeers[userID]){\r\n            activePeers[userID].close();\r\n        }\r\n    })\r\n\r\n    navigator.mediaDevices.getUserMedia({\r\n        video:true,\r\n        audio:false,\r\n    }).then((yourStream)=>{\r\n\r\n        peer.on(\"call\",(call)=>{\r\n            call.answer(yourStream);\r\n            const video2 = document.createElement(\"video\")\r\n            call.on(\"stream\",(anotherStream)=>{\r\n                addVideoStream(video2,anotherStream);\r\n            })\r\n        })\r\n\r\n        const video = document.createElement(\"video\")\r\n        addVideoStream(video,yourStream);\r\n\r\n        socket.on(\"user-joined\",(userID)=>{\r\n            connectToNewUser(userID,yourStream,peer);\r\n        })\r\n    })\r\n\r\n\r\n\r\n}\r\n\r\nfunction addVideoStream(video,stream){\r\n    const container = document.getElementById(\"r-video-container\");\r\n    video.srcObject = stream;\r\n    video.addEventListener(\"loadedmetadata\",()=>{\r\n        video.play();\r\n    })\r\n    container.appendChild(video);\r\n}\r\n\r\nfunction connectToNewUser(userID,yourStream,peer){\r\n    const call = peer.call(userID,yourStream);\r\n    const video = document.createElement(\"video\");\r\n    call.on(\"stream\",(anotherUserstream)=>{\r\n        addVideoStream(video,anotherUserstream);\r\n    })\r\n\r\n    call.on(\"close\",()=>{\r\n        video.remove();\r\n    })\r\n\r\n    activePeers[userID] = call;\r\n\r\n    \r\n}\r\n\r\nexport {initSocketConnection};"]},"metadata":{},"sourceType":"module"}