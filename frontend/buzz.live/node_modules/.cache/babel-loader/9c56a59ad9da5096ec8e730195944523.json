{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport Peer from \"peerjs\";\nconst activePeers = {};\nvar socket;\nconst container = document.getElementById(\"r-video-container\");\n\nfunction initSocketConnection(roomID, playVideoClient, setClinetState, clientRef, createMessage, setView) {\n  const peer = new Peer(undefined, {\n    host: '/',\n    port: '3001'\n  });\n  socket = io(\"http://localhost:5000\");\n  peer.on(\"open\", id => {\n    const uID = localStorage.getItem(\"id\");\n    socket.emit(\"join-room\", roomID, id, uID);\n  });\n  socket.on(\"user-leaved\", userID => {\n    if (activePeers[userID]) {\n      activePeers[userID].close();\n      console.log(\"user removed\");\n    } else {\n      console.log(\"user is not here\");\n    }\n  });\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: false\n  }).then(yourStream => {\n    peer.on(\"call\", call => {\n      call.answer(yourStream);\n      const video2 = document.createElement(\"video\");\n      video2.classList.add(\"user-video\");\n      call.on(\"stream\", anotherStream => {\n        addVideoStream(video2, anotherStream);\n      });\n    });\n    const video = document.createElement(\"video\");\n    video.classList.add(\"user-video\");\n    addVideoStream(video, yourStream);\n    socket.on(\"user-joined\", userID => {\n      connectToNewUser(userID, yourStream, peer);\n    });\n  });\n  socket.on(\"play-video\", url => {\n    playVideoClient(url);\n  });\n  socket.on(\"state-changed\", (state, seconds) => {\n    if (state) {\n      clientRef.current.seekTo(seconds, \"seconds\");\n    }\n\n    setClinetState(state);\n  });\n  socket.on(\"recieve-message\", msg => {\n    console.log(msg);\n    createMessage(msg);\n  });\n  socket.on(\"user-choice\", choice => {\n    setView(choice);\n  });\n}\n\nfunction addVideoStream(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener(\"loadedmetadata\", () => {\n    video.play();\n  });\n  container.appendChild(video);\n}\n\nfunction connectToNewUser(userID, yourStream, peer) {\n  const call = peer.call(userID, yourStream);\n  const video = document.createElement(\"video\");\n  video.classList.add(\"user-video\");\n  call.on(\"stream\", anotherUserstream => {\n    addVideoStream(video, anotherUserstream);\n  });\n  call.on(\"close\", () => {\n    video.remove();\n  });\n  activePeers[userID] = call;\n}\n\nfunction playVideoToOthers(videoID) {\n  socket.emit(\"video-playing\", videoID);\n}\n\nfunction userChoice(choice) {\n  socket.emit(\"user-choice\", choice);\n}\n\nfunction videoStateChanged(state, seconds) {\n  socket.emit(\"video-state\", state, seconds);\n}\n\nfunction sendMessageToOthers(msg) {\n  socket.emit(\"send-message\", msg);\n}\n\nexport { initSocketConnection, playVideoToOthers, videoStateChanged, sendMessageToOthers, userChoice };","map":{"version":3,"sources":["C:/Users/sakth/Documents/BackUp/Buzz.live/frontend/buzz.live/src/functions/roomConnection.js"],"names":["io","Peer","activePeers","socket","container","document","getElementById","initSocketConnection","roomID","playVideoClient","setClinetState","clientRef","createMessage","setView","peer","undefined","host","port","on","id","uID","localStorage","getItem","emit","userID","close","console","log","navigator","mediaDevices","getUserMedia","video","audio","then","yourStream","call","answer","video2","createElement","classList","add","anotherStream","addVideoStream","connectToNewUser","url","state","seconds","current","seekTo","msg","choice","stream","srcObject","addEventListener","play","appendChild","anotherUserstream","remove","playVideoToOthers","videoID","userChoice","videoStateChanged","sendMessageToOthers"],"mappings":"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","sourcesContent":["import {io} from \"socket.io-client\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst activePeers ={};\r\nvar socket\r\nconst container = document.getElementById(\"r-video-container\");\r\nfunction initSocketConnection(roomID,playVideoClient,setClinetState,clientRef,createMessage,setView){\r\n    const peer = new Peer(undefined, {\r\n        host: '/',\r\n        port: '3001'\r\n      })\r\n    socket = io(\"http://localhost:5000\")\r\n\r\n    peer.on(\"open\",(id)=>{\r\n        const uID = localStorage.getItem(\"id\");\r\n        socket.emit(\"join-room\",roomID,id,uID)\r\n    })\r\n\r\n    socket.on(\"user-leaved\",userID=>{\r\n        if(activePeers[userID]){\r\n            activePeers[userID].close();\r\n            console.log(\"user removed\");\r\n        }else{\r\n            console.log(\"user is not here\");\r\n        }\r\n    })\r\n\r\n    navigator.mediaDevices.getUserMedia({\r\n        video:true,\r\n        audio:false,\r\n    }).then((yourStream)=>{\r\n\r\n        peer.on(\"call\",(call)=>{\r\n            call.answer(yourStream);\r\n            const video2 = document.createElement(\"video\")\r\n            video2.classList.add(\"user-video\")\r\n            call.on(\"stream\",(anotherStream)=>{\r\n                addVideoStream(video2,anotherStream);\r\n            })\r\n        })\r\n\r\n        const video = document.createElement(\"video\")\r\n        video.classList.add(\"user-video\")\r\n        addVideoStream(video,yourStream);\r\n\r\n        socket.on(\"user-joined\",(userID)=>{\r\n            connectToNewUser(userID,yourStream,peer);\r\n        })\r\n    })\r\n\r\n    socket.on(\"play-video\",(url)=>{\r\n        playVideoClient(url);\r\n    })\r\n\r\n    socket.on(\"state-changed\",(state,seconds)=>{\r\n        if(state){\r\n            clientRef.current.seekTo(seconds,\"seconds\");\r\n        }\r\n        setClinetState(state) \r\n    })\r\n\r\n    socket.on(\"recieve-message\",(msg)=>{\r\n        console.log(msg);\r\n        createMessage(msg);\r\n    })\r\n\r\n    socket.on(\"user-choice\",(choice)=>{\r\n        setView(choice)\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\nfunction addVideoStream(video,stream){\r\n    video.srcObject = stream;\r\n    video.addEventListener(\"loadedmetadata\",()=>{\r\n        video.play();\r\n    })\r\n    container.appendChild(video);\r\n}\r\n\r\nfunction connectToNewUser(userID,yourStream,peer){\r\n    const call = peer.call(userID,yourStream);\r\n    const video = document.createElement(\"video\");\r\n    video.classList.add(\"user-video\")\r\n    call.on(\"stream\",(anotherUserstream)=>{\r\n        addVideoStream(video,anotherUserstream);\r\n    })\r\n\r\n    call.on(\"close\",()=>{\r\n        video.remove();\r\n    })\r\n\r\n    activePeers[userID]=call;\r\n}\r\n\r\n\r\n\r\nfunction playVideoToOthers(videoID){\r\n    socket.emit(\"video-playing\",videoID);\r\n}\r\n\r\nfunction userChoice(choice){\r\n    socket.emit(\"user-choice\",choice);\r\n}\r\n\r\nfunction videoStateChanged(state,seconds){\r\n    socket.emit(\"video-state\",state,seconds);\r\n}\r\n\r\nfunction sendMessageToOthers(msg){\r\n    socket.emit(\"send-message\",msg);\r\n}\r\n\r\nexport {initSocketConnection,playVideoToOthers,videoStateChanged,sendMessageToOthers,userChoice};"]},"metadata":{},"sourceType":"module"}