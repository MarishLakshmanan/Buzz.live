{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport Peer from \"peerjs\";\nconst activePeers = {};\nvar socket;\nlet myStream;\nconst uid = localStorage.getItem(\"id\");\n\nfunction initSocketConnection(roomID, playVideoClient, setClinetState, clientRef, createMessage, setView, getRoomUsers) {\n  socket = io(process.env.REACT_APP_BACKEND_API);\n  const peer = new Peer(uid, {\n    host: 'localhost',\n    port: '3001',\n    path: '/'\n  });\n  peer.on(\"open\", id => {\n    const uID = localStorage.getItem(\"id\");\n    socket.emit(\"join-room\", roomID, id, uID);\n  });\n  socket.on(\"user-leaved\", userID => {\n    if (activePeers[userID]) {\n      activePeers[userID].close();\n      getRoomUsers();\n      console.log(\"user removed\");\n    } else {\n      console.log(\"user is not here\");\n    }\n  });\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: false\n  }).then(yourStream => {\n    myStream = yourStream;\n    peer.on(\"call\", call => {\n      call.answer(yourStream);\n      console.log(\"answering the call\");\n      const video2 = document.createElement(\"video\");\n      video2.classList.add(\"user-video\");\n      call.on(\"stream\", anotherStream => {\n        console.log(anotherStream.getVideoTracks()[0].enabled);\n        console.log(\"adding the other user video\", call.peer);\n        addVideoStream(video2, anotherStream, call.peer);\n      });\n    });\n    const myVideo = document.createElement(\"video\");\n    myVideo.classList.add(\"user-video\");\n    addVideoStream(myVideo, yourStream, uid);\n    socket.on(\"user-joined\", userID => {\n      console.log(userID);\n      getRoomUsers();\n      setTimeout(connectToNewUser, 3000, userID, yourStream, peer);\n    });\n  });\n  socket.on(\"play-video\", url => {\n    playVideoClient(url);\n  });\n  socket.on(\"state-changed\", (state, seconds) => {\n    if (state) {\n      clientRef.current.seekTo(seconds, \"seconds\");\n    }\n\n    setClinetState(state);\n  });\n  socket.on(\"recieve-message\", msg => {\n    console.log(msg);\n    createMessage(msg);\n  });\n  socket.on(\"user-choice\", choice => {\n    setView(choice);\n  });\n  socket.on(\"video-mute\", (muted, userID) => {\n    console.log();\n    document.getElementById(userID + \"img\").style.opacity = muted ? 1 : 0;\n  });\n}\n\nfunction addVideoStream(video, stream, id) {\n  const container = document.getElementById(id);\n  video.srcObject = stream;\n  video.addEventListener(\"loadedmetadata\", () => {\n    video.play();\n  });\n  container.appendChild(video);\n}\n\nfunction connectToNewUser(userID, yourStream, peer) {\n  console.log(\"calling new user\");\n  const call = peer.call(userID, yourStream);\n  const video = document.createElement(\"video\");\n  video.classList.add(\"user-video\");\n  call.on(\"stream\", anotherUserstream => {\n    console.log(\"I am setting your video\", userID);\n    addVideoStream(video, anotherUserstream, userID);\n  });\n  call.on(\"close\", () => {\n    video.remove();\n  });\n  activePeers[userID] = call;\n}\n\nfunction toggleMic() {\n  const enabled = myStream.getAudioTracks()[0].enabled;\n\n  if (enabled) {\n    myStream.getAudioTracks()[0].enabled = false;\n  } else {\n    myStream.getAudioTracks()[0].enabled = true;\n  }\n}\n\nfunction toggleVideo() {\n  const enabled = myStream.getVideoTracks()[0].enabled;\n\n  if (enabled) {\n    myStream.getVideoTracks()[0].enabled = false;\n  } else {\n    myStream.getVideoTracks()[0].enabled = true;\n  }\n}\n\nfunction userVideoMuted(muted, userID) {\n  socket.emit(\"video-mute\", muted, userID);\n}\n\nfunction playVideoToOthers(videoID) {\n  socket.emit(\"video-playing\", videoID);\n}\n\nfunction userChoice(choice) {\n  socket.emit(\"user-choice\", choice);\n}\n\nfunction videoStateChanged(state, seconds) {\n  socket.emit(\"video-state\", state, seconds);\n}\n\nfunction sendMessageToOthers(msg) {\n  socket.emit(\"send-message\", msg);\n}\n\nexport { initSocketConnection, playVideoToOthers, videoStateChanged, sendMessageToOthers, userChoice, toggleMic, toggleVideo, userVideoMuted };","map":{"version":3,"sources":["C:/Users/sakth/Documents/BackUp/Buzz.live/frontend/buzz.live/src/functions/roomConnection.js"],"names":["io","Peer","activePeers","socket","myStream","uid","localStorage","getItem","initSocketConnection","roomID","playVideoClient","setClinetState","clientRef","createMessage","setView","getRoomUsers","process","env","REACT_APP_BACKEND_API","peer","host","port","path","on","id","uID","emit","userID","close","console","log","navigator","mediaDevices","getUserMedia","video","audio","then","yourStream","call","answer","video2","document","createElement","classList","add","anotherStream","getVideoTracks","enabled","addVideoStream","myVideo","setTimeout","connectToNewUser","url","state","seconds","current","seekTo","msg","choice","muted","getElementById","style","opacity","stream","container","srcObject","addEventListener","play","appendChild","anotherUserstream","remove","toggleMic","getAudioTracks","toggleVideo","userVideoMuted","playVideoToOthers","videoID","userChoice","videoStateChanged","sendMessageToOthers"],"mappings":"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","sourcesContent":["import {io} from \"socket.io-client\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst activePeers ={};\r\nvar socket\r\nlet myStream;\r\nconst uid = localStorage.getItem(\"id\")\r\n\r\nfunction initSocketConnection(roomID,playVideoClient,setClinetState,clientRef,createMessage,setView,getRoomUsers){\r\n    \r\n    socket = io(process.env.REACT_APP_BACKEND_API)\r\n\r\n    const peer = new Peer(uid, {\r\n        host: 'localhost',\r\n        port: '3001',\r\n        path: '/'\r\n    })\r\n\r\n    peer.on(\"open\",(id)=>{\r\n        const uID = localStorage.getItem(\"id\");\r\n        socket.emit(\"join-room\",roomID,id,uID)\r\n    })\r\n\r\n    socket.on(\"user-leaved\",userID=>{\r\n        if(activePeers[userID]){\r\n            activePeers[userID].close();\r\n            getRoomUsers();\r\n            console.log(\"user removed\");\r\n        }else{\r\n            console.log(\"user is not here\");\r\n        }\r\n    })\r\n\r\n    navigator.mediaDevices.getUserMedia({\r\n        video:true,\r\n        audio:false,\r\n    }).then((yourStream)=>{\r\n        myStream = yourStream;\r\n\r\n        peer.on(\"call\",(call)=>{\r\n            call.answer(yourStream);\r\n            console.log(\"answering the call\");\r\n            const video2 = document.createElement(\"video\")\r\n            video2.classList.add(\"user-video\")\r\n            call.on(\"stream\",(anotherStream,)=>{\r\n                console.log(anotherStream.getVideoTracks()[0].enabled);\r\n                console.log(\"adding the other user video\",call.peer);\r\n                addVideoStream(video2,anotherStream,call.peer);\r\n            })\r\n        })\r\n\r\n        const myVideo = document.createElement(\"video\")\r\n        myVideo.classList.add(\"user-video\")\r\n        addVideoStream(myVideo,yourStream,uid);\r\n\r\n        socket.on(\"user-joined\",(userID)=>{\r\n            console.log(userID);\r\n            getRoomUsers();\r\n            setTimeout(connectToNewUser,3000,userID,yourStream,peer);\r\n        })\r\n    })\r\n\r\n    socket.on(\"play-video\",(url)=>{\r\n        playVideoClient(url);\r\n    })\r\n\r\n    socket.on(\"state-changed\",(state,seconds)=>{\r\n        if(state){\r\n            clientRef.current.seekTo(seconds,\"seconds\");\r\n        }\r\n        setClinetState(state) \r\n    })\r\n\r\n    socket.on(\"recieve-message\",(msg)=>{\r\n        console.log(msg);\r\n        createMessage(msg);\r\n    })\r\n\r\n    socket.on(\"user-choice\",(choice)=>{\r\n        setView(choice)\r\n    })\r\n\r\n    socket.on(\"video-mute\",(muted,userID)=>{\r\n        console.log();\r\n        document.getElementById(userID+\"img\").style.opacity=(muted)?1:0;\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\nfunction addVideoStream(video,stream,id){\r\n    const container = document.getElementById(id);\r\n    video.srcObject = stream;\r\n    video.addEventListener(\"loadedmetadata\",()=>{\r\n        video.play();\r\n    })\r\n    container.appendChild(video);\r\n}\r\n\r\nfunction connectToNewUser(userID,yourStream,peer){\r\n    \r\n    console.log(\"calling new user\");\r\n    const call = peer.call(userID,yourStream);\r\n    const video = document.createElement(\"video\");\r\n    video.classList.add(\"user-video\")\r\n    call.on(\"stream\",(anotherUserstream)=>{\r\n        \r\n        console.log(\"I am setting your video\",userID);\r\n        addVideoStream(video,anotherUserstream,userID);\r\n    })\r\n\r\n    call.on(\"close\",()=>{\r\n        video.remove();\r\n    })\r\n\r\n    activePeers[userID]=call;\r\n    \r\n}\r\n\r\nfunction toggleMic(){\r\n    const enabled = myStream.getAudioTracks()[0].enabled;\r\n    if(enabled){\r\n        myStream.getAudioTracks()[0].enabled = false;\r\n    }else{\r\n        myStream.getAudioTracks()[0].enabled = true;\r\n    }\r\n}\r\n\r\nfunction toggleVideo(){\r\n    const enabled = myStream.getVideoTracks()[0].enabled;\r\n    if(enabled){\r\n        myStream.getVideoTracks()[0].enabled = false;\r\n    }else{\r\n        myStream.getVideoTracks()[0].enabled = true;\r\n    }\r\n}\r\n\r\nfunction userVideoMuted(muted,userID){\r\n    socket.emit(\"video-mute\",muted,userID);\r\n}\r\n\r\nfunction playVideoToOthers(videoID){\r\n    socket.emit(\"video-playing\",videoID);\r\n}\r\n\r\nfunction userChoice(choice){\r\n    socket.emit(\"user-choice\",choice);\r\n}\r\n\r\nfunction videoStateChanged(state,seconds){\r\n    socket.emit(\"video-state\",state,seconds);\r\n}\r\n\r\nfunction sendMessageToOthers(msg){\r\n    socket.emit(\"send-message\",msg);\r\n}\r\n\r\nexport {initSocketConnection,playVideoToOthers,videoStateChanged,sendMessageToOthers,userChoice,toggleMic,toggleVideo,userVideoMuted};"]},"metadata":{},"sourceType":"module"}